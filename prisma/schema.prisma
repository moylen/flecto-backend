generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model File {
  id         Int      @id @default(autoincrement())
  filename   String
  s3Key      String   @unique
  bucketName String
  size       Int
  mimeType   String
  createTime DateTime @default(now())

  user     User?
  articles ArticleFile[]

  @@map("file")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String?   @unique
  passwordHash String
  role         UserRole  @default(user)
  name         String?
  surname      String?
  description  String?
  avatarId     Int?      @unique
  createTime   DateTime  @default(now())
  updateTime   DateTime  @updatedAt
  deleteTime   DateTime?

  avatar           File?              @relation(fields: [avatarId], references: [id])
  tokens           UserToken[]
  contacts         UserContact[]
  emailConfirms    UserEmailConfirm[]
  articles         Article[]
  articleLikes     ArticleLike[]
  articleViews     ArticleView[]
  sendedMessages   ChatMessage[]      @relation("sender")
  receivedMessages ChatMessage[]      @relation("receiver")
  comments         ArticleComment[]

  @@map("user")
}

model UserContact {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  link       String
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_contact")
}

model UserToken {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @unique
  expireTime   DateTime
  isRevoked    Boolean  @default(false)
  createTime   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("user_token")
}

model UserEmailConfirm {
  id         Int      @id @default(autoincrement())
  userId     Int
  newEmail   String
  code       String
  isActive   Boolean  @default(true)
  expireTime DateTime
  createTime DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("user_email_confirm")
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String
  creatorId   Int
  createTime  DateTime  @default(now())
  updateTime  DateTime  @updatedAt
  deleteTime  DateTime?

  creator  User             @relation(fields: [creatorId], references: [id])
  likes    ArticleLike[]
  views    ArticleView[]
  tags     ArticleTag[]
  comments ArticleComment[]
  files    ArticleFile[]

  @@map("article")
}

model ArticleLike {
  userId     Int
  articleId  Int
  createTime DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
  @@map("article_like")
}

model ArticleView {
  userId     Int
  articleId  Int
  createTime DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
  @@map("article_view")
}

model ArticleComment {
  id         Int       @id @default(autoincrement())
  creatorId  Int
  articleId  Int
  content    String
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  deleteTime DateTime?

  creator User    @relation(fields: [creatorId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@map("article_comment")
}

model ArticleFile {
  articleId Int
  fileId    Int

  article Article @relation(fields: [articleId], references: [id])
  file    File    @relation(fields: [fileId], references: [id])

  @@id([articleId, fileId])
  @@map("article_file")
}

model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique

  articles ArticleTag[]

  @@map("tag")
}

model ArticleTag {
  articleId Int
  tagId     Int

  article Article @relation(fields: [articleId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("article_tag")
}

model ChatMessage {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  deleteTime DateTime?

  sender   User @relation("sender", fields: [senderId], references: [id])
  receiver User @relation("receiver", fields: [receiverId], references: [id])

  @@map("chat_message")
}
