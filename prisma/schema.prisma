generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model File {
  id         Int      @id @default(autoincrement())
  filename   String
  s3Key      String   @unique
  bucketName String
  size       Int
  mimeType   String
  createTime DateTime @default(now())

  user User?

  @@map("file")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String?   @unique
  passwordHash String
  role         UserRole  @default(user)
  name         String?
  surname      String?
  description  String?
  avatarId     Int?      @unique
  createTime   DateTime  @default(now())
  updateTime   DateTime  @updatedAt
  deleteTime   DateTime?

  avatar            File?              @relation(fields: [avatarId], references: [id])
  userTokens        UserToken[]
  userContacts      UserContact[]
  userEmailConfirms UserEmailConfirm[]
  articles          Article[]
  articleLikes      ArticleLike[]
  articleViews      ArticleView[]

  @@map("user")
}

model UserContact {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  link       String
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_contact")
}

model UserToken {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  refreshToken String   @unique
  expireTime   DateTime
  createTime   DateTime @default(now())

  @@map("user_token")
}

model UserEmailConfirm {
  id         Int      @id @default(autoincrement())
  userId     Int
  newEmail   String
  code       String
  isActive   Boolean  @default(true)
  expireTime DateTime
  createTime DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("user_email_confirm")
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String
  creatorId   Int
  createTime  DateTime  @default(now())
  updateTime  DateTime  @updatedAt
  deleteTime  DateTime?

  creator      User          @relation(fields: [creatorId], references: [id])
  articleLikes ArticleLike[]
  articleViews ArticleView[]
  articleTags  ArticleTag[]

  @@map("article")
}

model ArticleLike {
  userId     Int
  articleId  Int
  createTime DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
  @@map("article_like")
}

model ArticleView {
  userId     Int
  articleId  Int
  createTime DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
  @@map("article_view")
}

model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique

  articleTags ArticleTag[]

  @@map("tag")
}

model ArticleTag {
  articleId Int
  tagId     Int

  article Article @relation(fields: [articleId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("article_tag")
}
